---
layout: post
title:  "开发者必知的社交编程网站——GitHub"
date:   2007-12-25 00:00:00
---
* contents
{:toc}

GitHub 是全球最大的社交编程网站。通过 GitHub 可以对程序进行版本管理，并有效地进行多人协作，也可以为开源事业做点贡献。

# 社交

* 在 GitHub 上面查看和下载代码不需要注册，但是参与代码编辑需要注册账号。
* GitHub 上面可以加好友（Follow）、赞（Star）、评论与讨论（Issues）。
* 跟踪某个人或组织或软件库的动态。当然你自己也可以去刷动态（开发）。
* 你自己也可以成立组织。虽然你也可以成立极端组织或反动组织，但是这是个码农的网站，绝大多数人这里是为了开发。

# 版本管理

版本管理是 Git 和 GitHub 的核心功能。在编写小程序的时候并不需要太严格的控制，但是，如果开发大型程序的时候还仍然很随意，那么会给维护工作带来巨大的麻烦。因此能够有效追踪版本是很重要的。

## Git 与 GitHub

Git 是一个著名的版本管理软件。GitHub 是提供 Git 托管服务的网站。

Git 之所以能进行版本管理，是因为它保存了每个编辑的改动，从而可以通过追踪改动来进行版本控制。

Git 非常适合程序代码一类的纯文本文件。但对于 Word 文档一类的二进制文件，需要用其他工具来进行管理。

## 客户端

GitHub 推出了 Windows 和 Mac 版的客户端，但是 Linux 系统没有相应的客户端。

因此，在 Linux 中使用需要学习 Git 命令的用法，或者寻找其他图形界面版 Git 工具（不是 GitHub）。

[% callout %]

#### 邮箱

Git 有个关于邮箱的配置。一定要写上自己在 GitHub 上注册时的邮箱，否则提交之后动态也不算你的。

[% endcallout %]

## 管理自己的项目

为了能够管理自己的程序，需要按照以下思路来操作：

### 建立代码仓库

“仓库 (Repository 简称 Repo)”是存放源代码的地方。代码的存取、修改、评论（Issues）等均在仓库中体现。

所以，每建立一个新程序，你需要建立一个仓库（New repository），为仓库起一个名字。

值得注意的是，任何人都可以建立公开仓库（任何人都可以访问），但是只有付费之后才能建立私有仓库（只有指定人员才能访问）。

### 编辑

本地代码是不能直接编辑和提交的，因为缺少有关 Git 的信息。你需要将网站上面的仓库克隆 (Clone) 到本地，并且在这个克隆的文件夹里进行编码。因为这个文件夹才有 Git 信息，才能有效地追踪版本。

克隆时候，只需要在代码仓库的网页的右下角找到“Clone in Desktop”，即可将其克隆到本地。

注意不要用 Download ZIP。尽管它也能把代码完整地下载下来，但是也会因为缺少有关 Git 的信息而无法提交。

[% callout %]

#### Linux 用户

由于 GitHub 没有 Linux 客户端，因此需要手动配置 Git。建议使用 SSH key 来节省时间。需要进入 GitHub 网站的用户设置，找到 SSH Key 并且把生成的 key 复制到里面。

[% endcallout %]

### 提交和同步改动

编辑到一定程度（例如完成了一个功能），应该确认 (Commit) 一下改动，以方便追踪。

打开 GitHub 客户端（不是网站，因为改动还在本地），找到自己的仓库，客户端会列出你所进行的改动。你需要决定标记哪些文件，然后填写说明，并确认 (Commit) 改动。

注意，Commit 之后改动仍然在本地，而网站上面并不能看到这些改动。

如果希望将改动上传到网站，你需要点击“Sync”按钮。Sync 是“Push & Pull”，也就是说，将你的最新改动上传到网站 (Push)，并且将网站上面的改动同步到本地 (Pull)。点击 Sync 之后网站上面才是你编辑之后的最新版本。

还要注意，你不能直接提交对别人的软件仓库的编辑，除非别人在仓库设置中把你设置为“合作者 ()”。

对于 Linux 用户，使用 Git 时则需要 git add、git commit、git push 等命令。

### 分支 (Branch)

一个软件有很多功能。对于某个特定功能，你可以使用分支 (Branch) 来分割项目，从而做到各司其职。

### 发布 (Release)

当你的程序稳定之后，你可以决定将其发布 (Release)，这样发布时的代码和生成的二进制文件会被保存起来。

# 协作

## 评论 (Issue)

当你发现别人的程序出现 bug，或者希望提出意见和建议时，可以在其代码库中发起 Issue。

Issue 支持 Markdown 语法，也支持发图片。

可以在代码仓库中提出 Issue，也可以在某个特定的代码文件中提出 Issue。

因为 GitHub 是开发者的网站，所以评论时应进行有建设性的评论，不要随便灌水发段子。

## 分支 (Fork) 和提交 (Pull)

你不能直接改别人的代码，但是如果你实在想改，你可以复制一个分支 (Fork)。Fork 之后你就可以按照自己的意思对代码进行更改，因为 Fork 之后的仓库是你自己的版本。

当你认为自己的修改很有价值的时候，你可以考虑把你的改动和上游合并。

这时，你需要发起“Pull Request”，写清自己做了哪些贡献（尽管开发者可以追踪改动，但是你用自己语言描述一下，对谁都有好处）。上游开发者可以决定是否合并，并且在发生冲突的时候解决冲突。

# 其他功能

## Gist

GitHub Gist 是用来管理和分享代码片段的网站。这里的“代码片段”不一定必须是片段，也可以是一个不值得建立成仓库的小程序，或者是几个小程序的集合。

Gist 的代码也可以使用 Git 来进行版本控制。

在中国，虽然墙娘不敢再随便欺负小猫（GitHub 吉祥物），但是 GitHub Gist 仍然被墙，所以：

    192.30.252.142 gist.github.com
    199.27.74.133 gist-assets.github.com

## 博客

GitHub 提供了一个免费的静态空间，被称作“GitHub Pages”，可以放置静态网页（不支持动态网页）。不过 GitHub 鼓励大家利用这个空间建立自己的博客。当然，博客也是静态博客。

常见的博客系统有 Jekyll 和 Hexo，它们虽然都是静态博客，但是都支持一些“动态”功能。GitHub Pages 官方支持的是 Jekyll。

本网站虽然不是博客，但是也基于 Jekyll 开发。
